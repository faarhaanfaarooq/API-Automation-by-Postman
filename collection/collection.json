{
	"info": {
		"_postman_id": "35e47bca-a170-4dab-a861-76980fc3c14f",
		"name": "Assignment on API Automation by Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29168349",
		"_collection_link": "https://crimson-rocket-843656.postman.co/workspace/SQA-Course~c333dfff-d281-4865-bf5a-e89bf6a0e04b/collection/29168349-35e47bca-a170-4dab-a861-76980fc3c14f?action=share&source=collection_link&creator=29168349"
	},
	"item": [
		{
			"name": "Admin login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var token = jsonData.token;\r",
							"\r",
							"pm.collectionVariables.set(\"token\", token)\r",
							"\r",
							"//checks if admin is created or not\r",
							"pm.test(\"Created Admin\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.role).to.eql(\"Admin\");\r",
							"});\r",
							"\r",
							"//checks if admin can log in with correc creds\r",
							"pm.test(\"Admin can log In using correct credentials\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).includes(\"Login successfully\");\r",
							"});\r",
							"\r",
							"//checks if the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//checks if the response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//checks if the response has message, token and role\r",
							"pm.test(\"Response has required fields - message, token, and role\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"    pm.expect(responseData.role).to.exist;\r",
							"});\r",
							"\r",
							"//checks if the token is non-empty\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"//checks if the response is lesser than 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"//checks if the message field contains \"Login successfully\"\r",
							"pm.test(\"Verify the message field contains the expected message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.equal(\"Login successfully\");\r",
							"});\r",
							"\r",
							"//checks if the POST request is successfull\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});\r",
							"\r",
							"//checks is the role in admin or user\r",
							"pm.test(\"Role is either Admin or User\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.role).to.be.oneOf([\"Admin\", \"User\"]);\r",
							"});\r",
							"\r",
							"//checks if the token is a string of alphanumeric characters\r",
							"pm.test(\"Token is a string of alphanumeric characters\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.token).to.match(/^[a-zA-Z0-9]+$/, \"Token should only contain alphanumeric characters\");\r",
							"});\r",
							"\r",
							"//checks if the response has message, token and role field\r",
							"pm.test(\"Response has required fields - message, token, and role\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"    pm.expect(responseData.role).to.exist;\r",
							"});\r",
							"\r",
							"//checks if the token length is greater than 10\r",
							"pm.test(\"Token length is greater than 10\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.token.length).to.be.greaterThan(10, \"Token length should be greater than 10\");\r",
							"});\r",
							"\r",
							"//Checks if the role is either admin or user\r",
							"pm.test(\"Response role is either Admin or User\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const role = responseData.role;\r",
							"\r",
							"    pm.expect(role).to.be.oneOf([\"Admin\", \"User\"], \"Role should be either Admin or User\");\r",
							"});\r",
							"\r",
							"\r",
							"// Check if the saved email and password match the expected values\r",
							"pm.test(\"Verify email and password\", function () {\r",
							"    var savedEmail = pm.collectionVariables.get(\"adminMail\");\r",
							"    var savedPassword = pm.collectionVariables.get(\"adminPassword\");\r",
							"\r",
							"    pm.expect(savedEmail).to.equal(\"admin@roadtocareer.net\");\r",
							"    pm.expect(savedPassword).to.equal(\"1234\");\r",
							"});\r",
							"\r",
							"\r",
							"//checks if the password i\r",
							"pm.test(\"Password strength meets the requirements\", function () {\r",
							"    const password = pm.collectionVariables.get(\"adminPassword\");\r",
							"\r",
							"    // Test for password length\r",
							"    pm.expect(password.length).to.be.greaterThan(8, \"Password should be at least 8 characters long\");\r",
							"\r",
							"    // Test for at least one uppercase letter\r",
							"    pm.expect(password).to.match(/[A-Z]/, \"Password should contain at least one uppercase letter\");\r",
							"\r",
							"    // Test for at least one lowercase letter\r",
							"    pm.expect(password).to.match(/[a-z]/, \"Password should contain at least one lowercase letter\");\r",
							"\r",
							"    // Test for at least one digit\r",
							"    pm.expect(password).to.match(/[0-9]/, \"Password should contain at least one digit\");\r",
							"\r",
							"    // Test for at least one special character\r",
							"    pm.expect(password).to.match(/[!@#$%^&*]/, \"Password should contain at least one special character\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var adminMail = \"admin@roadtocareer.net\"\r",
							"var adminPassword = \"1234\";\r",
							"\r",
							"pm.collectionVariables.set(\"adminMail\", adminMail);\r",
							"pm.collectionVariables.set(\"adminPassword\", adminPassword);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin tries to logIn with wrong mail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//checks if the admin can log in with incorrect mail\r",
							"pm.test(\"Admin can not log In using incorrect mail\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).includes(\"not found\");\r",
							"});\r",
							"\r",
							"//check the status code\r",
							"pm.test(\"Status code is 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"//checks if the response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//checks if the response has message property\r",
							"pm.test(\"Response is an object with message property\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object').that.has.property('message');\r",
							"});\r",
							"\r",
							"//checks if the message property is empty or not\r",
							"pm.test(\"Message property is not empty\", function () {\r",
							"    pm.expect(pm.response.json().message).to.not.be.empty;\r",
							"});\r",
							"\r",
							"//chekcs for successful post request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"// Check if the saved email and password match the expected values\r",
							"pm.test(\"Verify email and password\", function () {\r",
							"    var savedEmail = pm.collectionVariables.get(\"adminMailInvalid\");\r",
							"    var savedPassword = pm.collectionVariables.get(\"adminPassword\");\r",
							"\r",
							"    pm.expect(savedEmail).to.equal(\"admin@roadtocareer.net\");\r",
							"    pm.expect(savedPassword).to.equal(\"1234\");\r",
							"});\r",
							"\r",
							"\r",
							"//checks if the response field has required field\r",
							"pm.test(\"Response has the required field - message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"//checks if the email and password are not empty\r",
							"pm.test(\"Email and password are not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.email).to.exist.and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
							"    pm.expect(responseData.password).to.exist.and.to.have.lengthOf.at.least(1, \"Password should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var adminMailInvalid = \"admin@gmail.net\"\r",
							"var adminPassword = \"1234\";\r",
							"\r",
							"pm.collectionVariables.set(\"adminMailInvalid\", adminMailInvalid);\r",
							"pm.collectionVariables.set(\"adminPassword\", adminPassword);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"admin@gmail.net\",\r\n    \"password\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin tries to logIn with wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//checks that the admin can not login using incorrect password\r",
							"pm.test(\"Admin can not log In using incorrect password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).includes(\"incorrect\");\r",
							"});\r",
							"\r",
							"//checks for status code 401\r",
							"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"//checks if the response has the required fields\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"//checks if the response shows incorrect password\r",
							"pm.test(\"The message includes the word 'incorrect'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.include(\"incorrect\");\r",
							"});\r",
							"\r",
							"//checks if the response time is less than 500ms\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"//checks for successful POST request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"// Check if the saved email and password match the expected values\r",
							"pm.test(\"Verify email and password\", function () {\r",
							"    var savedEmail = pm.collectionVariables.get(\"adminMail\");\r",
							"    var savedPassword = pm.collectionVariables.get(\"adminPasswordInvalid\");\r",
							"\r",
							"    pm.expect(savedEmail).to.equal(\"admin@roadtocareer.net\");\r",
							"    pm.expect(savedPassword).to.equal(\"1234\");\r",
							"});\r",
							"\r",
							"//checks if the password is wrong\r",
							"pm.test(\"Checks if the password is wrong\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(\"Password incorrect\");\r",
							"});\r",
							"\r",
							"//checks for the response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var adminMail = \"admin@gmail.net\"\r",
							"var adminPasswordInvalid = \"1234\";\r",
							"\r",
							"pm.collectionVariables.set(\"adminMailInvalid\", adminMail);\r",
							"pm.collectionVariables.set(\"adminPassword\", adminPasswordInvalid);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/login",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin creates new Agent",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var prefix = \"01500\"\r",
							"var randomNumber = _.random(100000, 999999)\r",
							"var phoneNumber = prefix + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"//chekcs if the user is created or not\r",
							"pm.test(\"Checks If user is created\", function () {\r",
							"    pm.expect(jsonData.message).include(\"User created\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"usedID\", jsonData.user.id)\r",
							"pm.collectionVariables.set(\"agentName\", jsonData.user.name)\r",
							"pm.collectionVariables.set(\"agentMail\", jsonData.user.email)\r",
							"pm.collectionVariables.set(\"agentNumber\", jsonData.user.phone_number)\r",
							"\r",
							"//checks for status code 201\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Checks if response message shows \"User created\"\r",
							"pm.test(\"Validate response message is 'User created'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.equal(\"User created\");\r",
							"});\r",
							"\r",
							"//checks if the user object is present in the response\r",
							"pm.test(\"User object is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user).to.exist;\r",
							"});\r",
							"\r",
							"//checks for non-negative user-id\r",
							"pm.test(\"User ID is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.user.id).to.be.a('number');\r",
							"    pm.expect(responseData.user.id).to.be.at.least(0, \"User ID should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"//checks for successful POST request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"//checks if the response time is less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//checks for email validation\r",
							"pm.test(\"Email type is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const email = responseData.user.email;\r",
							"\r",
							"    pm.expect(email).to.be.a('string', \"Email should be a string\");\r",
							"    pm.expect(email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Test to check if the user is an agent or not\r",
							"pm.test(\"If the created user is an agent or not\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.role).to.equal(\"Agent\");\r",
							"});\r",
							"\r",
							"\r",
							"//checks the password strength\r",
							"pm.test(\"Password strength is strong\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const password = responseData.user.password;\r",
							"\r",
							"    pm.expect(password).to.be.a('string', \"Password should be a string\");\r",
							"    pm.expect(password.length).to.be.greaterThan(8, \"Password should be at least 8 characters long\");\r",
							"    pm.expect(password).to.match(/[A-Z]/, \"Password should contain at least one uppercase letter\");\r",
							"    pm.expect(password).to.match(/[a-z]/, \"Password should contain at least one lowercase letter\");\r",
							"    pm.expect(password).to.match(/[0-9]/, \"Password should contain at least one number\");\r",
							"    pm.expect(password).to.match(/[$&+,:;=?@#|'<>.^*()%!-]/, \"Password should contain at least one special character\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Test to check if the phone number format is correct\r",
							"pm.test(\"Phone number format is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const phoneNumber = responseData.user.phone_number;\r",
							"\r",
							"    pm.expect(phoneNumber).to.be.a('string', \"Phone number should be a string\");\r",
							"    pm.expect(phoneNumber).to.match(/^\\d{11}$/, \"Phone number should be in the format XXXXXXXXXXX\");\r",
							"});\r",
							"\r",
							"// Test to check if the nid number format is correct\r",
							"pm.test(\"NID number format is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const nidNumber = responseData.user.nid;\r",
							"\r",
							"    pm.expect(nidNumber).to.be.a('string', \"NID number should be a string\");\r",
							"    pm.expect(nidNumber).to.match(/^\\d{10}$/, \"NID number should be in the format XXXXXXXXXX\");\r",
							"});\r",
							"\r",
							"//checks for naming format\r",
							"pm.test(\"User name format is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const userName = responseData.user.name;\r",
							"\r",
							"    pm.expect(userName).to.be.a('string', \"User name should be a string\");\r",
							"    pm.expect(userName).to.match(/^[A-Za-z\\s]+$/, \"User name should only contain letters and spaces\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ami Agent Miah\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1234\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\": \"1234789428\",\r\n    \"role\": \"Agent\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin creates an existing Agent",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var prefix = \"01500\"\r",
							"var randomNumber = _.random(100000, 999999)\r",
							"var phoneNumber = prefix + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//checks if user already exists\r",
							"pm.test(\"Checks If user already exists\", function () {\r",
							"    pm.expect(jsonData.message).includes(\"already exists\");\r",
							"});\r",
							"\r",
							"//checks for response code\r",
							"pm.test(\"Response status code is 208\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(208);\r",
							"});\r",
							"\r",
							"//checks for required field in response message\r",
							"pm.test(\"Response has the required field 'message'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"//checks for proper error message\r",
							"pm.test(\"Check if message contains the expected error message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.equal(\"User already exists\");\r",
							"});\r",
							"\r",
							"//Checks if the response time is in acceptable range\r",
							"pm.test(\"Response time is in an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"//checks if the 'user' object is present or not\r",
							"pm.test(\"Verify that the 'user' object is not present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user).to.not.exist;\r",
							"});\r",
							"\r",
							"//checks for successful POST request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"//checks email format\r",
							"pm.test(\"Email format is correct\", function () {\r",
							"    const savedEmail = pm.collectionVariables.get(\"agentMail\");\r",
							"\r",
							"    pm.expect(savedEmail).to.be.a('string', \"Email should be a string\");\r",
							"    pm.expect(savedEmail).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ami Agent Miah\",\r\n    \"email\": \"{{agentMail}}\",\r\n    \"password\": \"1234\",\r\n    \"phone_number\": \"{{agentNumber}}\",\r\n    \"nid\": \"1234789428\",\r\n    \"role\": \"Agent\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin creates new Customer1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//checks if the user is created or not\r",
							"pm.test(\"Checks If user is created\", function () {\r",
							"    pm.expect(jsonData.message).include(\"User created\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"usedID\", jsonData.user.id)\r",
							"pm.collectionVariables.set(\"customer1Name\", jsonData.user.name)\r",
							"pm.collectionVariables.set(\"customer1Mail\", jsonData.user.email)\r",
							"pm.collectionVariables.set(\"customer1Number\", jsonData.user.phone_number)\r",
							"\r",
							"\r",
							"\r",
							"//checks for status code\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//checks for valid message\r",
							"pm.test(\"Validate the 'message' field contains the expected value 'User created'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.equal(\"User created\");\r",
							"});\r",
							"\r",
							"//checks if the id is non-zero integer or not\r",
							"pm.test(\"Validate that the 'id' field is a non-zero integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.user.id).to.be.a('number').and.to.not.equal(0, \"Value should be a non-zero integer\");\r",
							"});\r",
							"\r",
							"//checks if the name field is a non-empty string\r",
							"pm.test(\"The 'name' field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name field should not be empty\");\r",
							"});\r",
							"\r",
							"//checks for successful POST request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"//checks for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//\r",
							"\r",
							"\r",
							"// Check if the 'name' field is a non-empty string\r",
							"pm.test(\"The 'name' field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name field should not be empty\");\r",
							"});\r",
							"\r",
							"// Check if the 'email' field is a valid email format\r",
							"pm.test(\"The 'email' field is a valid email format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"// Check if the 'phone_number' field is a valid phone number format\r",
							"pm.test(\"The 'phone_number' field is a valid phone number format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.phone_number).to.be.a('string').and.to.match(/^\\d{11}$/, \"Phone number should be a 11-digit number\");\r",
							"});\r",
							"\r",
							"// Check if the 'nid' field is a valid NID format\r",
							"pm.test(\"The 'nid' field is a valid NID format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.nid).to.be.a('string').and.to.match(/^\\d{10}$/, \"NID should be a 10-digit number\");\r",
							"});\r",
							"\r",
							"// Test to check if the user is an customer or not\r",
							"pm.test(\"If the created user is an customer or not\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.role).to.equal(\"Customer\");\r",
							"});\r",
							"\r",
							"//checks the password strength\r",
							"pm.test(\"Password strength is strong\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const password = responseData.user.password;\r",
							"\r",
							"    pm.expect(password).to.be.a('string', \"Password should be a string\");\r",
							"    pm.expect(password.length).to.be.greaterThan(8, \"Password should be at least 8 characters long\");\r",
							"    pm.expect(password).to.match(/[A-Z]/, \"Password should contain at least one uppercase letter\");\r",
							"    pm.expect(password).to.match(/[a-z]/, \"Password should contain at least one lowercase letter\");\r",
							"    pm.expect(password).to.match(/[0-9]/, \"Password should contain at least one number\");\r",
							"    pm.expect(password).to.match(/[$&+,:;=?@#|'<>.^*()%!-]/, \"Password should contain at least one special character\");\r",
							"});\r",
							"\r",
							"//checks if the user object is present in the response\r",
							"pm.test(\"User object is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user).to.exist;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var prefix = \"01500\"\r",
							"var randomNumber = _.random(100000, 999999)\r",
							"var phoneNumber = prefix + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ami Customer1 Bhai\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1234\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\": \"1234789428\",\r\n    \"role\": \"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin creates an existing Customer1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var prefix = \"01500\"\r",
							"var randomNumber = _.random(100000, 999999)\r",
							"var phoneNumber = prefix + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"//checks if the user is already created\r",
							"pm.test(\"Checks If user is created\", function () {\r",
							"    pm.expect(jsonData.message).include(\"already exists\");\r",
							"});\r",
							"\r",
							"//checks status code\r",
							"pm.test(\"Response status code is 208\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(208);\r",
							"});\r",
							"\r",
							"//checks for required fields in the response\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"//checks for the expected value\r",
							"pm.test(\"Message contains the expected value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.equal(\"User already exists\");\r",
							"});\r",
							"\r",
							"//checks for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Test to check if the response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Test to check if the response has a valid content-type header\r",
							"pm.test(\"Response has a valid content-type header\", function () {\r",
							"    pm.response.headers.get(\"content-type\");\r",
							"    pm.expect(pm.response.headers.get(\"content-type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test to check if the response contains a message property\r",
							"pm.test(\"Response contains a message property\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"// Test to check if the message property is a string\r",
							"pm.test(\"Message property is a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.message).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// Test to check if the message property is not empty\r",
							"pm.test(\"Message property is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.message).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ami Customer1 Bhai\",\r\n    \"email\": \"{{customer1Mail}}\",\r\n    \"password\": \"1234\",\r\n    \"phone_number\": \"{{customer1Number}}\",\r\n    \"nid\": \"1234789428\",\r\n    \"role\": \"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin creates new Customer2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var prefix = \"01500\"\r",
							"var randomNumber = _.random(100000, 999999)\r",
							"var phoneNumber = prefix + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//checks if the user is created or not\r",
							"pm.test(\"Checks If user is created\", function () {\r",
							"    pm.expect(jsonData.message).include(\"User created\");\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"usedID\", jsonData.user.id)\r",
							"pm.collectionVariables.set(\"customer1Name\", jsonData.user.name)\r",
							"pm.collectionVariables.set(\"customer1Mail\", jsonData.user.email)\r",
							"pm.collectionVariables.set(\"customer1Number\", jsonData.user.phone_number)\r",
							"\r",
							"\r",
							"\r",
							"//checks for status code\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//checks for valid message\r",
							"pm.test(\"Validate the 'message' field contains the expected value 'User created'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.equal(\"User created\");\r",
							"});\r",
							"\r",
							"//checks if the id is non-zero integer or not\r",
							"pm.test(\"Validate that the 'id' field is a non-zero integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.user.id).to.be.a('number').and.to.not.equal(0, \"Value should be a non-zero integer\");\r",
							"});\r",
							"\r",
							"//checks if the name field is a non-empty string\r",
							"pm.test(\"The 'name' field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name field should not be empty\");\r",
							"});\r",
							"\r",
							"//checks for successful POST request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"//checks for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//\r",
							"\r",
							"\r",
							"// Check if the 'name' field is a non-empty string\r",
							"pm.test(\"The 'name' field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name field should not be empty\");\r",
							"});\r",
							"\r",
							"// Check if the 'email' field is a valid email format\r",
							"pm.test(\"The 'email' field is a valid email format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, \"Email should be in a valid format\");\r",
							"});\r",
							"\r",
							"// Check if the 'phone_number' field is a valid phone number format\r",
							"pm.test(\"The 'phone_number' field is a valid phone number format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.phone_number).to.be.a('string').and.to.match(/^\\d{11}$/, \"Phone number should be a 11-digit number\");\r",
							"});\r",
							"\r",
							"// Check if the 'nid' field is a valid NID format\r",
							"pm.test(\"The 'nid' field is a valid NID format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.nid).to.be.a('string').and.to.match(/^\\d{10}$/, \"NID should be a 10-digit number\");\r",
							"});\r",
							"\r",
							"// Test to check if the user is an customer or not\r",
							"pm.test(\"If the created user is an customer or not\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user.role).to.equal(\"Customer\");\r",
							"});\r",
							"\r",
							"//checks the password strength\r",
							"pm.test(\"Password strength is strong\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const password = responseData.user.password;\r",
							"\r",
							"    pm.expect(password).to.be.a('string', \"Password should be a string\");\r",
							"    pm.expect(password.length).to.be.greaterThan(8, \"Password should be at least 8 characters long\");\r",
							"    pm.expect(password).to.match(/[A-Z]/, \"Password should contain at least one uppercase letter\");\r",
							"    pm.expect(password).to.match(/[a-z]/, \"Password should contain at least one lowercase letter\");\r",
							"    pm.expect(password).to.match(/[0-9]/, \"Password should contain at least one number\");\r",
							"    pm.expect(password).to.match(/[$&+,:;=?@#|'<>.^*()%!-]/, \"Password should contain at least one special character\");\r",
							"});\r",
							"\r",
							"//checks if the user object is present in the response\r",
							"pm.test(\"User object is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.user).to.exist;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ami Customer2 Bhai\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"1234\",\r\n    \"phone_number\": \"{{phoneNumber}}\",\r\n    \"nid\": \"1234789428\",\r\n    \"role\": \"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin creates an existing Customer2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var prefix = \"01500\"\r",
							"var randomNumber = _.random(100000, 999999)\r",
							"var phoneNumber = prefix + randomNumber;\r",
							"\r",
							"pm.collectionVariables.set(\"phoneNumber\", phoneNumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"//checks if the user is already created\r",
							"pm.test(\"Checks If user is created\", function () {\r",
							"    pm.expect(jsonData.message).include(\"already exists\");\r",
							"});\r",
							"\r",
							"//checks status code\r",
							"pm.test(\"Response status code is 208\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(208);\r",
							"});\r",
							"\r",
							"//checks for required fields in the response\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"//checks for the expected value\r",
							"pm.test(\"Message contains the expected value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.equal(\"User already exists\");\r",
							"});\r",
							"\r",
							"//checks for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Test to check if the response body is not empty\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Test to check if the response has a valid content-type header\r",
							"pm.test(\"Response has a valid content-type header\", function () {\r",
							"    pm.response.headers.get(\"content-type\");\r",
							"    pm.expect(pm.response.headers.get(\"content-type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test to check if the response contains a message property\r",
							"pm.test(\"Response contains a message property\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"// Test to check if the message property is a string\r",
							"pm.test(\"Message property is a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.message).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// Test to check if the message property is not empty\r",
							"pm.test(\"Message property is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.message).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Ami Customer2 Bhai\",\r\n    \"email\": \"{{customer2Mail}}\",\r\n    \"password\": \"1234\",\r\n    \"phone_number\": \"{{customer2Number}}\",\r\n    \"nid\": \"1234789428\",\r\n    \"role\": \"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/user/create",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to agent from System Accuount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//checks for successful transaction\r",
							"pm.test(\"Deposit successful\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).includes(\"successful\");\r",
							"});\r",
							"\r",
							"//checks for status code\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//checks for required fields in response\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.trnxId).to.exist;\r",
							"    pm.expect(responseData.commission).to.exist;\r",
							"    pm.expect(responseData.currentBalance).to.exist;\r",
							"});\r",
							"\r",
							"//checks if the trnxID is empty or not\r",
							"pm.test(\"trnxId is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.trnxId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"//checks the commission\r",
							"pm.test(\"Commission is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.commission).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"//checks the current balance\r",
							"pm.test(\"currentBalance is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.currentBalance).to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.be.at.least(0, \"currentBalance should be a non-negative number\");\r",
							"});\r",
							"\r",
							"//checks for successful POST request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"//checks response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//checks if the commission is less than or equal to the current balance\r",
							"pm.test(\"Commission is less than or equal to current balance\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.commission).to.be.at.most(responseData.currentBalance);\r",
							"});\r",
							"\r",
							"//checks if the current balance is a whole number\r",
							"pm.test(\"currentBalance is a whole number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.currentBalance).to.be.an('number');\r",
							"    pm.expect(responseData.currentBalance % 1).to.equal(0, \"currentBalance should be a whole number\");\r",
							"});\r",
							"\r",
							"//checks if the message is not empty\r",
							"pm.test(\"Message is not an empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var agentBalance = 5000;\r",
							"\r",
							"pm.collectionVariables.set(\"agentBalance\", agentBalance);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agentNumber}}\",\r\n    \"amount\":5000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to agent(invalid account number) from System Accuount",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//checks for status code\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"//checks for required field\r",
							"pm.test(\"Response has the required field - message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"//checks if the message is empty or not\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"//checks response time\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Test to check if the response content type is JSON\r",
							"pm.test(\"Response content type is JSON\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// Test to check if the response has a valid error message\r",
							"pm.test(\"Response has a valid error message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.not.be.empty;\r",
							"    pm.expect(responseData.message).to.match(/error|invalid/i);\r",
							"});\r",
							"\r",
							"// Test to check if the response has a unique error message\r",
							"pm.test(\"Response has a unique error message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    const errorMessages = pm.globals.get(\"errorMessages\") || [];\r",
							"    pm.globals.set(\"errorMessages\", [...new Set([...errorMessages, responseData.message])]);\r",
							"\r",
							"    pm.expect(errorMessages).to.not.include(responseData.message);\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific header\r",
							"pm.test(\"Response has a specific header\", function () {\r",
							"    pm.response.to.have.header(\"X-Custom-Header\");\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific cookie\r",
							"pm.test(\"Response has a specific cookie\", function () {\r",
							"    pm.expect(pm.cookies.has('session_id')).to.be.true;\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific property\r",
							"pm.test(\"Response has a specific property\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property(\"status\");\r",
							"});\r",
							"\r",
							"// Test to check if the status property has a specific value\r",
							"pm.test(\"Status property has a specific value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.status).to.equal(\"failed\");\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific value in an array\r",
							"pm.test(\"Response has a specific value in an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.data).to.be.an('array').that.includes(\"value\");\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific number of elements in an array\r",
							"pm.test(\"Response has a specific number of elements in an array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.data).to.be.an('array').with.lengthOf(5);\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific boolean value\r",
							"pm.test(\"Response has a specific boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.success).to.be.true;\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific number value\r",
							"pm.test(\"Response has a specific number value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.count).to.be.a('number').and.to.be.above(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{$randomPhoneNumber}}\",\r\n    \"amount\":5000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to customer1 from agent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//checks response code\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//checks if the message field is valid or not\r",
							"pm.test(\"Validate the message field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string', \"Value should be a string\");\r",
							"});\r",
							"\r",
							"//checks trnxID\r",
							"pm.test(\"Validate trnxId field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.trnxId).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"//checks for comission field\r",
							"pm.test(\"Commission field is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.commission).to.be.a('number');\r",
							"    pm.expect(responseData.commission).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"//checks currentBalance field\r",
							"pm.test(\"The currentBalance field is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.currentBalance).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"//checks for successful deposit\r",
							"pm.test(\"Deposit successful\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.includes(\"Deposit successful\");\r",
							"});\r",
							"\r",
							"//checks for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//checks for successful POST request\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{agentNumber}}\",\r\n    \"to_account\":\"{{customer1Number}}\",\r\n    \"amount\":500\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Deposit to customer1(invalid) from agent Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 404\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is in an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{agentNumber}}\",\r\n    \"to_account\":\"{{$randomPhoneNumber}}\",\r\n    \"amount\":5000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/deposit",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"deposit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Agent Balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//checks for response code\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//checks for required fields\r",
							"pm.test(\"Response has required fields - message and balance\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('balance');\r",
							"});\r",
							"\r",
							"//checks for balance\r",
							"pm.test(\"Balance is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.balance).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"//checks for message field\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"//checks for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"// Test to check if the response has a specific header\r",
							"pm.test(\"Response has a specific header\", function () {\r",
							"    pm.response.to.have.header(\"X-Custom-Header\");\r",
							"});\r",
							"\r",
							"//checks if the response shows agent balance\r",
							"pm.test(\"Is it Agent balance\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).contains(\"Agent balance\");\r",
							"});\r",
							"\r",
							"//checks for valid message format\r",
							"pm.test(\"Response has a valid message format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"//checks for valid balance format\r",
							"pm.test(\"Balance is a valid number format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.balance).to.be.a('number');\r",
							"});\r",
							"\r",
							"//checks for correct content type header\r",
							"pm.test(\"Response has the correct content type header\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"//checks for response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//checks for agent number in the response\r",
							"pm.test(\"Agent number is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.agentNumber).to.exist;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{agentNumber}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{agentNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Money Withdraw by Customer1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.trnxId).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.fee).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"trnxId is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.trnxId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Fee is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.fee).to.be.a('number');\r",
							"    pm.expect(responseData.fee).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"currentBalance is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.currentBalance).to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the withdrawn amount is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.currentBalance).to.be.at.least(0, \"Withdrawn amount should be non-negative\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Withdrawn amount is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.currentBalance).to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.be.at.least(0, \"Withdrawn amount should be non-negative\");\r",
							"});\r",
							"\r",
							"pm.test(\"Message is a string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.be.a('string');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer1Number}}\",\r\n    \"to_account\":\"{{agentNumber}}\",\r\n    \"amount\":100\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Money Withdraw by Customer1(more than balance)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 208\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(208);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.currentBalance).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"currentBalance is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.currentBalance).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer1Number}}\",\r\n    \"to_account\":\"{{agentNumber}}\",\r\n    \"amount\":5000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/withdraw",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"withdraw"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Customer1 balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response should have required fields - message and balance\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an(\"object\");\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a(\"string\");\r",
							"    pm.expect(responseData.balance).to.exist.and.to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Balance is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.balance).to.be.a('number');\r",
							"    pm.expect(responseData.balance).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customer1Number}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customer1Number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send money from Customer1 to Customer2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.trnxId).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.fee).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"trnxId is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.trnxId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"trnxId should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Fee is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.fee).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"currentBalance is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.currentBalance).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.be.at.least(0, \"currentBalance should be non-negative\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer1Number}}\",\r\n    \"to_account\":\"{{customer2Number}}\",\r\n    \"amount\":50\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/sendmoney",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"sendmoney"
					]
				}
			},
			"response": []
		},
		{
			"name": "Customer2 to Merchant Payment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.trnxId).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.fee).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"trnxId is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.trnxId).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"trnxId should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Fee should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.fee).to.be.a('number');\r",
							"    pm.expect(responseData.fee).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Current balance should be a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.currentBalance).to.be.a('number');\r",
							"    pm.expect(responseData.currentBalance).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"from_account\":\"{{customer2Number}}\",\r\n    \"to_account\":\"01686606905\",\r\n    \"amount\":50\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/transaction/payment",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"payment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Customer2 balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('balance');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Balance is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.balance).to.be.a('number');\r",
							"    pm.expect(responseData.balance).to.satisfy(function (balance) {\r",
							"        return balance >= 0;\r",
							"    }, \"Balance should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/transaction/balance/{{customer2Number}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"{{customer2Number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Customer2 statement",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('count');\r",
							"    pm.expect(responseData).to.have.property('transactions');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate transactions array is present and contains at least one element\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.transactions).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseURL}}/transaction/statement/{{customer2Number}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"statement",
						"{{customer2Number}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check merchant balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('balance');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Balance is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.balance).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.balance).to.be.at.least(0, \"Balance should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the 'message' field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "ROADTOSDET",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseURL}}/transaction/balance/01686606905",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"transaction",
						"balance",
						"01686606905"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQHJvYWR0b2NhcmVlci5uZXQiLCJwYXNzd29yZCI6IjEyMzQiLCJpYXQiOjE2OTMwNjEzNzYsImV4cCI6MTY5MzA2MzE3Nn0.5mzFoNeCo-RxmB6ktAlVoV0oMuhyajFSBz7POASLYz8"
		},
		{
			"key": "phoneNumber",
			"value": "01500851043"
		},
		{
			"key": "baseURL",
			"value": "http://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "usedID",
			"value": 23992
		},
		{
			"key": "agentName",
			"value": "Ami Agent Miah"
		},
		{
			"key": "agentMail",
			"value": "Nigel_Yost10@gmail.com"
		},
		{
			"key": "agentNumber",
			"value": "01500851043"
		},
		{
			"key": "customer1Name",
			"value": "Ami Customer2 Bhai"
		},
		{
			"key": "customer1Mail",
			"value": "Boris.Gottlieb@hotmail.com"
		},
		{
			"key": "customer1Number",
			"value": "01500145147"
		},
		{
			"key": "customer2Name",
			"value": "Ami Customer2 Bhai"
		},
		{
			"key": "customer2Mail",
			"value": "Selina_Reilly@yahoo.com"
		},
		{
			"key": "customer2Number",
			"value": "01500695565"
		},
		{
			"key": "adminMail",
			"value": "admin@roadtocareer.net"
		},
		{
			"key": "adminPassword",
			"value": "1234"
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "adminMailInvalid",
			"value": "admin@gmail.net"
		},
		{
			"key": "agentBalance",
			"value": "5000",
			"type": "string"
		}
	]
}